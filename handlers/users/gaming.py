from aiogram.dispatcher import FSMContext

from aiogram.types import ReplyKeyboardRemove
import random
from keyboards.default import game
from keyboards.default.gamebut import game1, game2
from loader import dp
from aiogram import types
from aiogram.dispatcher.filters import Command

from states import Game


@dp.message_handler(Command("game"))
async def enter_test(message: types.Message):
    await message.answer("-.-.-.-.-.-.-.-.-–ò–ì–†–ê-.-.-.-.-.-.-.-.- \n"
                         "–ö–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã\–±—É–º–∞–≥–∞ \n \n"
                         "–î–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä..", reply_markup=game)
    await Game.q1.set()


@dp.message_handler(state=Game.q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    bot = ""
    comp = str(random.randint(1, 3))  # 1 - –ö–∞–º–µ–Ω—å, 2 - –ù–æ–∂–Ω–∏—Ü—ã, 3 - –ë—É–º–∞–≥–∞
    if comp == "1":
        bot = "–ö–∞–º–µ–Ω—å üóø"
    elif comp == "2":
        bot = "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è"
    elif comp == "3":
        bot = "–ë—É–º–∞–≥—É üìÉ"
    if answer == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É..":
        await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    elif answer == "–ö–∞–º–µ–Ω—å üóø" and comp == "1":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ù–∏—á—å—è! :/ -=-=-=-=-=- \n \n")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ö–∞–º–µ–Ω—å üóø" and comp == "2":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :D -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ö–∞–º–µ–Ω—å üóø" and comp == "3":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ü—Ä–æ–∏–≥—Ä—ã—à :( -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ" and comp == "1":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ü—Ä–æ–∏–≥—Ä—ã—à :( -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ" and comp == "2":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ù–∏—á—å—è! :/ -=-=-=-=-=- \n \n")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ" and comp == "3":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :D -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ë—É–º–∞–≥–∞ üìÉ" and comp == "1":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :D -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ë—É–º–∞–≥–∞ üìÉ" and comp == "2":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ü—Ä–æ–∏–≥—Ä—ã—à :( -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ë—É–º–∞–≥–∞ üìÉ" and comp == "3":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ù–∏—á—å—è! :/ -=-=-=-=-=- \n \n")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    else:
        await message.answer("–ñ–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!!")

# await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
# await state.reset_state()  # await state.reset_state(with data=False) - –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –¥–∞—Ç—ã
